name: Build and Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake pkg-config \
            qt6-base-dev qt6-multimedia-dev qt6-webengine-dev libvlc-dev gh libboost-all-dev ffmpeg libsdl2-dev

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/install_root \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_CATCH=OFF

      - name: Build project
        run: |
          cmake --build build
      - name: "List all files"
        run: |
          echo $PWD
          ls -R

      - name: Get project version
        id: get_version
        run: |
          PROJECT_VERSION=$(grep -oP 'VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt | head -n 1)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> "$GITHUB_OUTPUT"
          echo "Detected project version: $PROJECT_VERSION"
      - name: Rename artifact
        run: |
          mv build/mfaomp mfaomp-linux-x86_64-v${{ steps.get_version.outputs.PROJECT_VERSION }}

      - name: Create or Update GitHub Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: "v${{ steps.get_version.outputs.PROJECT_VERSION }}"
          GH_TOKEN: ${{ github.token }}
          ASSET_NAME: mfaomp-linux-x86_64-v${{ steps.get_version.outputs.PROJECT_VERSION }}
        run: |
          echo "Version to delete: $TAG_NAME"
          if gh release list | awk '{print $3}' | grep -x "$TAG_NAME"; then
            echo "Release $TAG_NAME found. Replacing file with current"
            gh release upload "$TAG_NAME" "$ASSET_NAME" --clobber
          else
            echo "Release $TAG_NAME not found."
            echo "Creating release for version: $TAG_NAME"
            gh release create "$TAG_NAME" --target master --title "Release $TAG_NAME" --generate-notes "$ASSET_NAME"
          fi

  build-flatpak:
    runs-on: ubuntu-latest
    needs: build-and-release
    env:
      FLATPAK_MANIFEST: "io.github.Neurofibromin.mfaomp.yaml"
      OLD_SHA256: "dd1e9b304212b484ad898d1f7bc853017a3708c69f4970f6ad3b8b8a3e89f3a9"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y flatpak flatpak-builder
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

      - name: get_new_checksum
        run: |
          cd packaging
          set +e
          BUILD_OUTPUT=$(flatpak-builder --force-clean --repo=repo build-dir "$FLATPAK_MANIFEST" 2>&1)
          BUILD_EXIT_CODE=$?
          set -e
          if [ $BUILD_EXIT_CODE -ne 0 ] && echo "$BUILD_OUTPUT" | grep -q "Wrong sha256 checksum"; then
            echo "Build failed with a checksum error. Parsing output to find new checksum..."
            NEW_SHA256=$(echo "$BUILD_OUTPUT" | grep 'was ' | awk '{print $5}' | sed 's/"//g')
            if [ -z "$NEW_SHA256" ]; then
              echo "Error: Could not extract new checksum from build output."
              exit 1
            fi
            
            echo "Found new checksum: $NEW_SHA256"
            echo "NEW_CHECKSUM=$NEW_SHA256" >> "$GITHUB_OUTPUT"
           else
              if [ $BUILD_EXIT_CODE -eq 0 ]; then
                echo "Initial build was successful. No checksum update needed."
                else
                echo "Build failed for an unexpected reason. See log below:"
                echo "$BUILD_OUTPUT"
              fi
              exit $BUILD_EXIT_CODE
            fi
          fi

      - name: update manifest with new checksum
        run: |
            echo "Updating manifest file: $FLATPAK_MANIFEST"
            sed -i "s/$OLD_SHA256/${steps.get_new_checksum.outputs.NEW_CHECKSUM}/g" "$FLATPAK_MANIFEST"
            echo "Checksum updated successfully. Retrying the build..."
            # Attempt the build again with the corrected manifest.
            flatpak-builder --force-clean --repo=repo build-dir "$FLATPAK_MANIFEST"


      - name: build with new checksum
        run: |
          cd packaging
          flatpak-builder build-dir --force-clean --user --install-deps-from=flathub --repo=repo --ccache --install "$FLATPAK_MANIFEST"

      - name: bundle
        run: |
          cd packaging
          flatpak build-bundle repo mfaomp.flatpak io.github.Neurofibromin.mfaomp --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo

      - name: upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: "v${{ needs.build-and-release.steps.get_version.outputs.PROJECT_VERSION }}"
          GH_TOKEN: ${{ github.token }}
          ASSET_NAME: mfaomp-flatpak-x86_64-v${{ needs.build-and-release.steps.get_version.outputs.PROJECT_VERSION }}.flatpak
        run: |
          cd packaging
          mv mfaomp.flatpak $ASSET_NAME
          gh release upload "$TAG_NAME" "$ASSET_NAME" --clobber