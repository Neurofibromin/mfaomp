name: Build and Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake pkg-config \
            qt6-base-dev qt6-multimedia-dev qt6-webengine-dev libvlc-dev vlc-plugin-qt gh

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/install_root \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=23 \
            -DCMAKE_CXX_STANDARD_REQUIRED=ON

      - name: Build project
        run: |
          cmake --build build
      - name: "List all files"
        run: |
          echo $PWD
          ls -R

      - name: Get project version
        id: get_version
        run: |
          PROJECT_VERSION=$(grep -oP 'VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt | head -n 1)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> "$GITHUB_OUTPUT"
          echo "Detected project version: $PROJECT_VERSION"
      - name: Rename artifact
        run: |
          mv build/mfaomp mfaomp-linux-x86_64-v${{ steps.get_version.outputs.PROJECT_VERSION }}

      - name: Create or Update GitHub Release and Upload Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: "v${{ steps.get_version.outputs.PROJECT_VERSION }}"
          GH_TOKEN: ${{ github.token }}
          ASSET_NAME: mfaomp-linux-x86_64-v${{ steps.get_version.outputs.PROJECT_VERSION }}
        run: |
          echo "Version to delete: $TAG_NAME"
          if gh release list | awk '{print $3}' | grep -x "$TAG_NAME"; then
            echo "Release $TAG_NAME found. Replacing file with current"
            gh release upload "$TAG_NAME" "$ASSET_NAME" --clobber
          else
            echo "Release $TAG_NAME not found."
            echo "Creating prerelease for version: $TAG_NAME"
            gh release create "$TAG_NAME" --target master --title "Release $TAG_NAME" --generate-notes "$ASSET_NAME"
          fi